name: Build and Push to ECR

on:
  workflow_run:
    workflows: 
      - "Python Backend Check"
      - "Vue Frontend Check"
    types:
      - completed
  push:
    tags:
      - '*' # Trigger on every tag push
  workflow_dispatch: # Allows manual execution of the workflow

jobs:
  check-python-backend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r demo/backend/requirements.txt

      # Step 4: Run and Test Backend
      - name: Run and Test Backend
        run: |
          python demo/backend/app.py &
          sleep 5
          curl -f http://127.0.0.1:5000/health
          curl -f http://127.0.0.1:5000/DummyWeatherForecast

  check-vue-frontend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Replace with the version of Node.js you are using

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          cd demo/frontend/vue-you-did-it
          npm install

      # Step 4: Lint Vue project
      - name: Lint Vue project
        run: |
          cd demo/frontend/vue-you-did-it
          npm run lint

  build-and-push:
    needs: [check-python-backend, check-vue-frontend] # Ensures both checks are completed first
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      # Step 4: Build and Push Frontend Docker image
      - name: Build and Push Frontend
        run: |
          docker build -t vwm-advanced-logistics-analytics-infrastructure-frontend demo/frontend/vue-you-did-it/
          docker tag vwm-advanced-logistics-analytics-infrastructure-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vwm-advanced-logistics-analytics-infrastructure-frontend:${{ github.ref_name }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vwm-advanced-logistics-analytics-infrastructure-frontend:${{ github.ref_name }}

      # Step 5: Build and Push Backend Docker image
      - name: Build and Push Backend
        run: |
          docker build -t vwm-advanced-logistics-analytics-infrastructure-backend demo/backend/
          docker tag vwm-advanced-logistics-analytics-infrastructure-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vwm-advanced-logistics-analytics-infrastructure-backend:${{ github.ref_name }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vwm-advanced-logistics-analytics-infrastructure-backend:${{ github.ref_name }}

      # Step 6: Scan and wait for Frontend Docker image
      - name: Scan and Wait for Frontend Image
        run: |
          aws ecr start-image-scan --repository-name vwm-advanced-logistics-analytics-infrastructure-frontend --image-id imageTag=${{ github.ref_name }}
          for i in {1..30}; do # Up to 5 minutes (30 attempts x 10 seconds)
            status=$(aws ecr describe-image-scan-findings \
              --repository-name vwm-advanced-logistics-analytics-infrastructure-frontend \
              --image-id imageTag=${{ github.ref_name }} \
              --query "imageScanStatus.status" --output text 2>/dev/null || echo "ERROR")
            
            if [[ "$status" == "COMPLETE" ]]; then
              echo "Frontend image scan completed."
              break
            elif [[ "$status" == "FAILED" ]]; then
              echo "Frontend image scan failed."
              exit 1
            elif [[ "$status" == "ERROR" ]]; then
              echo "Frontend image scan in progress. Retrying in 10 seconds..."
            else
              echo "Frontend image scan in progress. Retrying in 10 seconds..."
            fi
            sleep 10
          done
          
          if [[ "$status" != "COMPLETE" ]]; then
            echo "Frontend image scan did not complete within the expected time."
            exit 1
          fi

          aws ecr describe-image-scan-findings \
            --repository-name vwm-advanced-logistics-analytics-infrastructure-frontend \
            --image-id imageTag=${{ github.ref_name }}

  cloudformation-stack:
    needs: [build-and-push]
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 2: Validate and Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        run: |
          STACK_NAME="stack-vwm-advanced-logistics-analytics-infrastructure-parameters"
          TEMPLATE_BODY="https://s3.amazonaws.com/stack-vwm-advanced-logistics-analytics-infrastructure/parameters/ssm-parameters.yaml"
          PARAMETERS="ParameterKey=BackendContainerName,ParameterValue=BackContainer \
            ParameterKey=BackendContainerPort,ParameterValue=5000 \
            ParameterKey=BackendImageRepository,ParameterValue=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vwm-backend:${{ github.ref_name }} \
            ParameterKey=BackendServiceName,ParameterValue=backend \
            ParameterKey=BackendTargetGroupName,ParameterValue=backend-tg \
            ParameterKey=BaseTemplateURL,ParameterValue=https://stack-vwm-advanced-logistics-analytics-infrastructure \
            ParameterKey=CWLogGroupRetentionInDays,ParameterValue=30 \
            ParameterKey=DBBackupRetentionPeriod,ParameterValue=7 \
            ParameterKey=DBInstanceClass,ParameterValue=db.t3.micro \
            ParameterKey=DBPreferredBackupWindow,ParameterValue=07:00-08:00 \
            ParameterKey=DBPreferredMaintenanceWindow,ParameterValue=sun:08:00-sun:09:00 \
            ParameterKey=DBUsername,ParameterValue=postgres \
            ParameterKey=DesiredCount,ParameterValue=1 \
            ParameterKey=FrontendContainerName,ParameterValue=FrontendContainer \
            ParameterKey=FrontendContainerPort,ParameterValue=80 \
            ParameterKey=FrontendImageRepository,ParameterValue=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vwm-frontend:${{ github.ref_name }} \
            ParameterKey=FrontendTargetGroupName,ParameterValue=frontend-tg \
            ParameterKey=HealthCheckImageRepository,ParameterValue=vwm-advanced-logistics-analytics-infrastructure-health-check:latest \
            ParameterKey=MLContainerName,ParameterValue=MLContainer \
            ParameterKey=MLContainerPort,ParameterValue=5001 \
            ParameterKey=MLImageRepository,ParameterValue=vwm-advanced-logistics-analytics-infrastructure-ml:latest \
            ParameterKey=MLServiceName,ParameterValue=ml \
            ParameterKey=MLTargetGroupName,ParameterValue=ml-tg \
            ParameterKey=PrivateSubnets,ParameterValue=subnet-08a0555180cf67442,subnet-00430cfa34f8399ba,subnet-013cc38f635924ec5,subnet-0c300200230fb9e75,subnet-0a516704a7f663adb,subnet-09c68d061519dc742 \
            ParameterKey=PublicSubnets,ParameterValue=subnet-037029409ebf2e40a,subnet-02d3b1f7781083329,subnet-04b8975560e504362,subnet-0bc409e74d3daace3,subnet-0f84440d859dff00a,subnet-0c2415ce936583b0f \
            ParameterKey=ResourcesPrefix,ParameterValue=vwm \
            ParameterKey=RouteTables,ParameterValue=rtb-02ca366497a9244f4,rtb-0e902c3c1527e37d9,rtb-0d9e2f241a061eb18 \
            ParameterKey=ScheduleExpression,ParameterValue=cron(0 0 1 */4 ? *) \
            ParameterKey=ServiceName,ParameterValue=frontend \
            ParameterKey=TargetGroupHealthCheckPath,ParameterValue=/health \
            ParameterKey=VPCId,ParameterValue=vpc-0e47b3aad6a2663ce"

          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" > /dev/null 2>&1; then
            echo "Stack exists. Updating..."
            aws cloudformation update-stack --stack-name "$STACK_NAME" \
              --template-body "$TEMPLATE_BODY" \
              --parameters $PARAMETERS \
              --capabilities CAPABILITY_NAMED_IAM
          else
            echo "Stack does not exist. Creating..."
            aws cloudformation create-stack --stack-name "$STACK_NAME" \
              --template-body "$TEMPLATE_BODY" \
              --parameters $PARAMETERS \
              --capabilities CAPABILITY_NAMED_IAM
          fi

          echo "Waiting for the stack operation to complete..."
          aws cloudformation wait stack-update-complete --stack-name "$STACK_NAME" || aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
          echo "Stack operation completed successfully."