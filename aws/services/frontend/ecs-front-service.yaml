AWSTemplateFormatVersion: "2010-09-09"
Description: Stack to create ECS service

Parameters:
  VPCId:
    Type: String

  Subnets:
    Type: String

  ALB:
    Type: String

  SecurityGroup:
    Type: String

  StackName:
    Type: String

  ResourcesPrefix:
    Type: String

  ServiceName:  
    Type: String

  TargetGroupName:
    Type: String

  ContainerPort:
    Type: Number

  TargetGroupHealthCheckPath:
    Type: String

  ContainerName:
    Type: String
  
  ECSCluster:
    Type: String

  TaskDefinitionArn:
    Type: String

  DesiredCount:  
    Type: Number

  SSLCertificateArn:
    Type: String
    Description: ARN of the SSL certificate for HTTPS
    Default: arn:aws:acm:us-east-1:302672446683:certificate/31f11806-4c72-4af5-96fb-a2be6f7b0aa9

  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: 60
    MinValue: 0
    MaxValue: 600
    Description: Grace period in seconds before health checks determine an ECS task is unhealthy.
  
  ProjectName:
    Type: String 

  Environment:
    Type: String 
    
  Team:
    Type: String  

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ResourcesPrefix}-${Environment}-${ServiceName}-tg"
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: !Ref ContainerPort
      TargetType: ip
      HealthCheckPath: !Ref TargetGroupHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub "${ResourcesPrefix}-${Environment}-${ServiceName}-tg"
        - Key: Stack
          Value: !Ref StackName
        - Key: Project
          Value: !Ref ProjectName

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: !Ref ContainerPort
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn:
    - ALBHTTPListener
    Properties:
      ServiceName: !Sub "${ResourcesPrefix}-${Environment}-${ServiceName}-service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinitionArn
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds 
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [",", !Ref Subnets]
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
      Tags:
        - Key: Name
          Value: !Sub "${ResourcesPrefix}-${Environment}-${ServiceName}-service"
        - Key: Stack
          Value: !Ref StackName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Team
          Value: !Ref Team

# ToDos (Best Practices)
# 1. Define an `AutoScalingPolicy` to handle demand spikes and reduce costs.
# 2. Consider enabling `stickiness` in `TargetGroup` if session persistence is required.