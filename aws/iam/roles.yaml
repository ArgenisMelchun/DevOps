AWSTemplateFormatVersion: "2010-09-09"
Description: Stack to create IAM roles

Parameters:
  StackName:
    Type: String
    Default: roles.yaml

  ResourcesPrefix:
    Type: String

  SecretArn:
    Type: String

  ProjectName:
    Type: String 

  Environment:
    Type: String 
    
  Team:
    Type: String 
  
  S3BucketName:
    Type: String

  SNSTopicArn:
    Type: String

Resources:
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcesPrefix}-${Environment}-ecs-taskexecution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SecretArn
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ResourcesPrefix}-${Environment}-task:*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${S3BucketName}"
        - PolicyName: SNSPublishAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopicArn
      Tags:
        - Key: Name
          Value: !Sub "${ResourcesPrefix}-${Environment}-ecs-taskexecution-role"
        - Key: Stack
          Value: !Ref StackName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Team
          Value: !Ref Team
  
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcesPrefix}-${Environment}-eventbridge-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AllowECSTaskExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: "*"  # TODO TaskDefinitionArn of healthcheck task
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt TaskExecutionRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${ResourcesPrefix}-${Environment}-eventbridge-role"
        - Key: Stack
          Value: !Ref StackName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Team
          Value: !Ref Team

Outputs:
  TaskExecutionRoleARN:
    Description: Role for the ECS task execution
    Value: !GetAtt TaskExecutionRole.Arn

  EventBridgeRoleArn:
    Description: "ARN del Role utilizado por EventBridge para ejecutar ECS Task"
    Value: !GetAtt EventBridgeRole.Arn
